version: "3.8"

services:
  authdb:
    image: mysql
    container_name: authdb
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: auth_service_db
    ports:
      - 3310:3306
    networks:
      - microservices-network
    volumes:
      - /c/docker-volumes/mysql/authdb:/var/lib/mysql

  userdb:
    image: mysql
    container_name: userdb
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: user_service_db
    ports:
      - 3307:3306
    networks:
      - microservices-network
    volumes:
      - /c/docker-volumes/mysql/userdb:/var/lib/mysql

  bookdb:
    image: mysql
    container_name: bookdb
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: book_service_db
    ports:
      - 3308:3306
    networks:
      - microservices-network
    volumes:
      - /c/docker-volumes/mysql/bookdb:/var/lib/mysql

  borrowingdb:
    image: mysql
    container_name: borrowingdb
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: borrowing_service_db
    ports:
      - 3309:3306
    networks:
      - microservices-network
    volumes:
      - /c/docker-volumes/mysql/borrowingdb:/var/lib/mysql

  redis:
    image: redis:latest
    hostname: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - microservices-network

  discovery-server:
    build:
      context: ./discovery-server
    ports:
      - "8761:8761"
    networks:
      - microservices-network
    container_name: discovery-server

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "8080:8080"
    networks:
      - microservices-network
    container_name: api-gateway
    depends_on:
      - discovery-server
      - redis

  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    ports:
      - "9004:9004"
    networks:
      - microservices-network
    container_name: auth-service
    depends_on:
      - discovery-server
      - authdb

  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    ports:
      - "9002:9002"
    networks:
      - microservices-network
    container_name: user-service
    depends_on:
      - discovery-server
      - userdb

  book-service:
    build:
      context: .
      dockerfile: book-service/Dockerfile
    ports:
      - "9001:9001"
    networks:
      - microservices-network
    container_name: book-service
    depends_on:
      - discovery-server
      - bookdb

  borrowing-service:
    build:
      context: .
      dockerfile: borrowing-service/Dockerfile
    ports:
      - "9003:9003"
    networks:
      - microservices-network
    container_name: borrowing-service
    depends_on:
      - discovery-server
      - borrowingdb
      - book-service
      - user-service
      - auth-service
      - kafka
      - zookeeper
  notification-service:
    build:
      context: .
      dockerfile: notification-service/Dockerfile
    ports:
      - "9005:9005"
    networks:
      - microservices-network
    container_name: notification-service
    depends_on:
      - kafka
      - zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    restart: "on-failure"
    networks:
      - microservices-network

  kafka:
    image: confluentinc/cp-kafka:7.7.0
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - microservices-network

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.7.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka
    ports:
      - 9021:9021
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "kafka:9092"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    restart: "on-failure"
    networks:
      - microservices-network

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped
    networks:
      - microservices-network

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - microservices-network

volumes:
  authdb_data:
  userdb_data:
  bookdb_data:
  borrowingdb_data:

networks:
  microservices-network:
    driver: bridge
